// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ratelimiter.proto

package grpc_ratelimiter_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RatelimitRequest struct {
	// total number of GPUs across all learners for this job
	Gpus int64 `protobuf:"varint,1,opt,name=gpus,proto3" json:"gpus,omitempty" bson:"gpus,omitempty"`
	//Optional. If not specified, assume nvidia-TeslaK80
	//Can only be nvidia-TeslaK80, nvidia-TeslaP100 or nvidia-TeslaV100
	GpuType    string `protobuf:"bytes,2,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty" bson:"gpu_type,omitempty"`
	TrainingId string `protobuf:"bytes,3,opt,name=training_id,json=trainingId,proto3" json:"training_id,omitempty" bson:"training_id,omitempty"`
	UserId     string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" bson:"user_id,omitempty"`
	// total number of CPUs requested
	Cpus                 float32  `protobuf:"fixed32,5,opt,name=cpus,proto3" json:"cpus,omitempty" bson:"cpus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RatelimitRequest) Reset()         { *m = RatelimitRequest{} }
func (m *RatelimitRequest) String() string { return proto.CompactTextString(m) }
func (*RatelimitRequest) ProtoMessage()    {}
func (*RatelimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92bc505a8d9eb516, []int{0}
}

func (m *RatelimitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RatelimitRequest.Unmarshal(m, b)
}
func (m *RatelimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RatelimitRequest.Marshal(b, m, deterministic)
}
func (m *RatelimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatelimitRequest.Merge(m, src)
}
func (m *RatelimitRequest) XXX_Size() int {
	return xxx_messageInfo_RatelimitRequest.Size(m)
}
func (m *RatelimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RatelimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RatelimitRequest proto.InternalMessageInfo

func (m *RatelimitRequest) GetGpus() int64 {
	if m != nil {
		return m.Gpus
	}
	return 0
}

func (m *RatelimitRequest) GetGpuType() string {
	if m != nil {
		return m.GpuType
	}
	return ""
}

func (m *RatelimitRequest) GetTrainingId() string {
	if m != nil {
		return m.TrainingId
	}
	return ""
}

func (m *RatelimitRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RatelimitRequest) GetCpus() float32 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

type RatelimitResponse struct {
	// true if there are enough resources for the job to run
	Allowed              bool     `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty" bson:"allowed,omitempty"`
	Zone                 string   `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty" bson:"zone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RatelimitResponse) Reset()         { *m = RatelimitResponse{} }
func (m *RatelimitResponse) String() string { return proto.CompactTextString(m) }
func (*RatelimitResponse) ProtoMessage()    {}
func (*RatelimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92bc505a8d9eb516, []int{1}
}

func (m *RatelimitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RatelimitResponse.Unmarshal(m, b)
}
func (m *RatelimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RatelimitResponse.Marshal(b, m, deterministic)
}
func (m *RatelimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatelimitResponse.Merge(m, src)
}
func (m *RatelimitResponse) XXX_Size() int {
	return xxx_messageInfo_RatelimitResponse.Size(m)
}
func (m *RatelimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RatelimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RatelimitResponse proto.InternalMessageInfo

func (m *RatelimitResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func (m *RatelimitResponse) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type UpdateOptions struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *UpdateOptions) Reset()         { *m = UpdateOptions{} }
func (m *UpdateOptions) String() string { return proto.CompactTextString(m) }
func (*UpdateOptions) ProtoMessage()    {}
func (*UpdateOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_92bc505a8d9eb516, []int{2}
}

func (m *UpdateOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateOptions.Unmarshal(m, b)
}
func (m *UpdateOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateOptions.Marshal(b, m, deterministic)
}
func (m *UpdateOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOptions.Merge(m, src)
}
func (m *UpdateOptions) XXX_Size() int {
	return xxx_messageInfo_UpdateOptions.Size(m)
}
func (m *UpdateOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOptions.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOptions proto.InternalMessageInfo

type UpdateResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty" bson:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *UpdateResponse) Reset()         { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()    {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92bc505a8d9eb516, []int{3}
}

func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateResponse.Unmarshal(m, b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateResponse.Marshal(b, m, deterministic)
}
func (m *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(m, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateResponse.Size(m)
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

func (m *UpdateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*RatelimitRequest)(nil), "grpc.ratelimiter.v1.RatelimitRequest")
	proto.RegisterType((*RatelimitResponse)(nil), "grpc.ratelimiter.v1.RatelimitResponse")
	proto.RegisterType((*UpdateOptions)(nil), "grpc.ratelimiter.v1.UpdateOptions")
	proto.RegisterType((*UpdateResponse)(nil), "grpc.ratelimiter.v1.UpdateResponse")
}

func init() { proto.RegisterFile("ratelimiter.proto", fileDescriptor_92bc505a8d9eb516) }

var fileDescriptor_92bc505a8d9eb516 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x14, 0x34, 0x6d, 0x6d, 0xeb, 0x2b, 0x7e, 0x74, 0x3d, 0x18, 0x7b, 0xb1, 0xac, 0x28, 0xc5, 0x43,
	0x40, 0xfd, 0x05, 0x3d, 0xd6, 0x8b, 0xb0, 0xb4, 0xe0, 0x45, 0xca, 0x36, 0x79, 0x2c, 0x0b, 0x31,
	0xbb, 0xee, 0x87, 0x52, 0xff, 0x84, 0x7f, 0xc1, 0x9f, 0x2a, 0xd9, 0x36, 0x18, 0x25, 0xe8, 0xc5,
	0xdb, 0x7b, 0x33, 0x2f, 0x33, 0x93, 0x61, 0x61, 0x68, 0xb8, 0xc3, 0x5c, 0x3e, 0x49, 0x87, 0x26,
	0xd1, 0x46, 0x39, 0x45, 0x8e, 0x85, 0xd1, 0x69, 0x52, 0xc7, 0x5f, 0xae, 0xe9, 0x7b, 0x04, 0x47,
	0xac, 0x82, 0x18, 0x3e, 0x7b, 0xb4, 0x8e, 0x10, 0xe8, 0x08, 0xed, 0x6d, 0x1c, 0x8d, 0xa3, 0x49,
	0x9b, 0x85, 0x99, 0x9c, 0x42, 0x5f, 0x68, 0xbf, 0x74, 0x6b, 0x8d, 0x71, 0x6b, 0x1c, 0x4d, 0xf6,
	0x58, 0x4f, 0x68, 0x3f, 0x5f, 0x6b, 0x24, 0x67, 0x30, 0x70, 0x86, 0xcb, 0x42, 0x16, 0x62, 0x29,
	0xb3, 0xb8, 0x1d, 0x58, 0xa8, 0xa0, 0x59, 0x46, 0x4e, 0xa0, 0xe7, 0x2d, 0x9a, 0x92, 0xec, 0x04,
	0xb2, 0x5b, 0xae, 0xb3, 0xac, 0x34, 0x4a, 0x4b, 0xa3, 0xdd, 0x71, 0x34, 0x69, 0xb1, 0x30, 0xd3,
	0x29, 0x0c, 0x6b, 0x81, 0xac, 0x56, 0x85, 0x45, 0x12, 0x43, 0x8f, 0xe7, 0xb9, 0x7a, 0xc5, 0x2c,
	0x84, 0xea, 0xb3, 0x6a, 0x2d, 0x25, 0xde, 0x54, 0x51, 0x65, 0x0a, 0x33, 0x3d, 0x84, 0xfd, 0x85,
	0xce, 0xb8, 0xc3, 0x7b, 0xed, 0xa4, 0x2a, 0x2c, 0xbd, 0x82, 0x83, 0x0d, 0x50, 0x17, 0xb4, 0x3e,
	0x4d, 0xd1, 0xda, 0x4a, 0x70, 0xbb, 0xde, 0x7c, 0xb4, 0x60, 0xc0, 0xbe, 0x4a, 0x22, 0x8f, 0x00,
	0x77, 0x6a, 0x35, 0xdd, 0xda, 0x5d, 0x24, 0x0d, 0x2d, 0x26, 0x3f, 0x1b, 0x1c, 0x5d, 0xfe, 0x75,
	0xb6, 0x89, 0x41, 0x77, 0xc8, 0x03, 0x0c, 0x36, 0xd1, 0x16, 0x96, 0x0b, 0x24, 0xb4, 0xf1, 0xc3,
	0x6f, 0x7f, 0x33, 0x3a, 0xff, 0xe5, 0xa6, 0x49, 0x79, 0xae, 0x1c, 0xcf, 0xff, 0x51, 0x79, 0xd5,
	0x0d, 0x0f, 0xea, 0xf6, 0x33, 0x00, 0x00, 0xff, 0xff, 0x73, 0x01, 0xcb, 0xa3, 0x65, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RatelimiterClient is the client API for Ratelimiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RatelimiterClient interface {
	// ===== GET ENDPOINTS, called from trainer =====
	// JobAllowed returns true if there are enough resources to schedule the job
	JobAllowed(ctx context.Context, in *RatelimitRequest, opts ...grpc.CallOption) (*RatelimitResponse, error)
	// ===== UPDATE ENDPOINTS, to force refresh counts =====
	// UpdateUsage updates the usage and resets allowed GPUs counters
	UpdateUsage(ctx context.Context, in *UpdateOptions, opts ...grpc.CallOption) (*UpdateResponse, error)
	// UpdateTotal refreshes the total number of GPUs in the cluster
	UpdateTotal(ctx context.Context, in *UpdateOptions, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type ratelimiterClient struct {
	cc *grpc.ClientConn
}

func NewRatelimiterClient(cc *grpc.ClientConn) RatelimiterClient {
	return &ratelimiterClient{cc}
}

func (c *ratelimiterClient) JobAllowed(ctx context.Context, in *RatelimitRequest, opts ...grpc.CallOption) (*RatelimitResponse, error) {
	out := new(RatelimitResponse)
	err := c.cc.Invoke(ctx, "/grpc.ratelimiter.v1.Ratelimiter/JobAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratelimiterClient) UpdateUsage(ctx context.Context, in *UpdateOptions, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/grpc.ratelimiter.v1.Ratelimiter/UpdateUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratelimiterClient) UpdateTotal(ctx context.Context, in *UpdateOptions, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/grpc.ratelimiter.v1.Ratelimiter/UpdateTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatelimiterServer is the server API for Ratelimiter service.
type RatelimiterServer interface {
	// ===== GET ENDPOINTS, called from trainer =====
	// JobAllowed returns true if there are enough resources to schedule the job
	JobAllowed(context.Context, *RatelimitRequest) (*RatelimitResponse, error)
	// ===== UPDATE ENDPOINTS, to force refresh counts =====
	// UpdateUsage updates the usage and resets allowed GPUs counters
	UpdateUsage(context.Context, *UpdateOptions) (*UpdateResponse, error)
	// UpdateTotal refreshes the total number of GPUs in the cluster
	UpdateTotal(context.Context, *UpdateOptions) (*UpdateResponse, error)
}

func RegisterRatelimiterServer(s *grpc.Server, srv RatelimiterServer) {
	s.RegisterService(&_Ratelimiter_serviceDesc, srv)
}

func _Ratelimiter_JobAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatelimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatelimiterServer).JobAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ratelimiter.v1.Ratelimiter/JobAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatelimiterServer).JobAllowed(ctx, req.(*RatelimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ratelimiter_UpdateUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatelimiterServer).UpdateUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ratelimiter.v1.Ratelimiter/UpdateUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatelimiterServer).UpdateUsage(ctx, req.(*UpdateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ratelimiter_UpdateTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatelimiterServer).UpdateTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ratelimiter.v1.Ratelimiter/UpdateTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatelimiterServer).UpdateTotal(ctx, req.(*UpdateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ratelimiter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ratelimiter.v1.Ratelimiter",
	HandlerType: (*RatelimiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobAllowed",
			Handler:    _Ratelimiter_JobAllowed_Handler,
		},
		{
			MethodName: "UpdateUsage",
			Handler:    _Ratelimiter_UpdateUsage_Handler,
		},
		{
			MethodName: "UpdateTotal",
			Handler:    _Ratelimiter_UpdateTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ratelimiter.proto",
}
